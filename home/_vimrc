set runtimepath=~/vimfiles,$VIMRUNTIME

" Setup vim-plug https://github.com/junegunn/vim-plug/wiki/tips#automatic-installation
let data_dir = has('nvim') ? stdpath('data') . $HOME.'/site' : $HOME.'/vimfiles'
if empty(glob(data_dir . '/autoload/plug.vim'))
  silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

call plug#begin()
Plug 'cocopon/iceberg.vim'
Plug 'vim-airline/vim-airline'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-commentary'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'godlygeek/tabular'
Plug 'preservim/vim-markdown'
Plug 'prabirshrestha/vim-lsp'
Plug 'prabirshrestha/asyncomplete.vim'
Plug 'prabirshrestha/asyncomplete-lsp.vim'
call plug#end()


" Terminal Output Codes
let &t_SI = "\e[6 q"
let &t_EI = "\e[2 q"

" Editor Options
set encoding=utf-8
set number
set backspace=indent,eol,start

set showcmd
set showmatch
set scrolloff=5

set ignorecase
set smartcase
set hlsearch
set incsearch

set splitbelow

set wildmenu
set wildmode=longest,list,full

set expandtab
set tabstop=2
set shiftwidth=0

set shell=\"C:\Program\ Files\PowerShell\7\pwsh.exe\"

set t_Co=256
set background=dark
syntax on
colorscheme iceberg

" Set the default listing style to tree.
let g:netrw_liststyle = 3

" Make vertical splitting the default for previewing files.
" Split the preview window into the right side.
let g:netrw_preview = 1
let g:netrw_alto = 0

" When a vertical preview window is opened, the directory listing
" will use only 20% of the columns available; the rest of the window
" is used for the preview window.
let g:netrw_winsize = 20

" Key Mappings
nnoremap <silent> <F5> :w<CR>:source $MYVIMRC<CR>
nnoremap <silent> <C-[><C-[> :noh<CR>
nnoremap <silent> <Space><Space> :let @/ = '\<' . expand('<cword>') . '\>'<CR>:set hlsearch<CR>
nnoremap <silent> gl :ls<CR>
nnoremap <silent> gb :bn<CR>
nnoremap <silent> gB :bp<CR>
nnoremap <silent> g= :set lazyredraw<CR>gg=G`'zz:set nolazyredraw<CR>
nnoremap <silent> gyy "*yy
nmap <Space>h <Space><Space>:%s/<C-r>///g<Left><Left>

vnoremap <silent> gy "*y

cnoremap <C-a> <C-b>

" Autocommands
autocmd CmdlineEnter * call echoraw(&t_SI)
autocmd CmdlineLeave * call echoraw(&t_EI)

fun! GetPopupId(n)
  let pops = popup_list()
  if len(pops) == 0
    return -1
  endif
  return pops[a:n]
endfun

fun! PopupScroll(id,n)
  let pos = popup_getpos(a:id)
  let firstline = pos.firstline + a:n
  if firstline < 1
    let firstline = 1
  elseif firstline > pos.lastline
    let firstline = pos.lastline
  endif
  call popup_setoptions(a:id, {'firstline': firstline})
endfun

fun! PopupFilterScroll(id, key)
  if a:key == "j"
    call PopupScroll(a:id,1)
    return 1
  endif
  if a:key == "\<C-D>"
    call PopupScroll(a:id,10)
    return 1
  endif
  if a:key == "k"
    call PopupScroll(a:id,-1)
    return 1
  endif
  if a:key == "\<C-U>"
    call PopupScroll(a:id,-10)
    return 1
  endif
  if a:key =="x"
    call popup_close(a:id)
    return 1
  endif
  return 1
endfun

fun! AttachPopupScroller(id) abort
  " Want to handle the time when a popup window is opened.
  " There is a possibility that the first element might be not
  " opened popup window.
  let winid = GetPopupId(0)
  if winid > 0
    call timer_stop(a:id)
    call popup_setoptions(winid, #{filter: 'PopupFilterScroll'})
  endif
endfun

if !empty(globpath(&rtp, 'autoload/lsp.vim'))
  fun! s:on_lsp_buffer_enabled() abort
    let g:vsnip_snippet_dir = '$HOME/.vim/snippets'
    setlocal omnifunc=lsp#complete
    setlocal signcolumn=yes
    if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif
    nmap <buffer> <F2> <plug>(lsp-rename)
    nmap <buffer> = <plug>(lsp-document-format)
    " lsp_float_opend and lsp#document_hover_preview_winid
    " did not work as expected with lsp-peek-definition.
    nmap <buffer> gd <plug>(lsp-peek-definition)
          \ :call timer_start(100, 'AttachPopupScroller', {})<CR>
    nmap <buffer> gD <plug>(lsp-definition)
    nmap <buffer> gs <plug>(lsp-document-symbol-search)
    nmap <buffer> gS <plug>(lsp-workspace-symbol-search)
    nmap <buffer> gr <plug>(lsp-references)
    nmap <buffer> gi <plug>(lsp-implementation)
    nmap <buffer> gt <plug>(lsp-type-definition)
    nmap <buffer> gh <plug>(lsp-hover)
          \ :call timer_start(100, 'AttachPopupScroller', {})<CR>
    nmap <buffer> gk <plug>(lsp-code-action)
    nmap <buffer> g[ <plug>(lsp-previous-diagnostic)
    nmap <buffer> g] <plug>(lsp-previous-diagnostic)
    inoremap <expr> <CR>    pumvisible() ? asyncomplete#close_popup() : "\<CR>"
    autocmd! BufWritePre <buffer>
          \ call execute('LspCodeActionSync source.organizeImports') |
          \ LspDocumentFormatSync
  endfun
  if executable('gopls')
    au User lsp_setup call lsp#register_server({
          \ 'name': 'gopls',
          \ 'cmd': {server_info->['gopls']},
          \ 'allowlist': ['go'],
          \ })
  endif
  if executable('pylsp')
    au User lsp_setup call lsp#register_server({
          \ 'name': 'pylsp',
          \ 'cmd': {server_info->['pylsp']},
          \ 'allowlist': ['python'],
          \ 'config': {'pylsp': {'plugins': {'autopep8': {'enabled': v:false}}}},
          \ })
  endif  
  if executable('elixir-ls')
    au User lsp_setup call lsp#register_server({
          \ 'name': 'elixir-ls',
          \ 'cmd': {server_info->['elixir-ls']},
          \ 'allowlist': ['elixir'],
          \ 'semantic_highlight': v:true,
          \ })
  endif  
  if executable('rust-analyzer')
    au User lsp_setup call lsp#register_server({
          \   'name': 'Rust Language Server',
          \   'cmd': {server_info->['rust-analyzer']},
          \   'whitelist': ['rust'],
          \ })
  endif
  augroup lsp_install
    au!
    autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
  augroup END
  command! LspDebug
        \ let lsp_log_verbose=1 |
        \ let lsp_log_file = expand('~/lsp.log') |
        \ :vnew | execute "ter ++curwin tail -f " . expand('~/lsp.log') |
        \ :wincmd p
  let g:lsp_diagnostics_enabled = 1
  let g:lsp_diagnostics_echo_cursor = 1
  let g:lsp_diagnostics_float_cursor = 1
endif
